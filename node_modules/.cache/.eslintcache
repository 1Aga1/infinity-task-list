[{"C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\index.tsx":"1","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\App.tsx":"2","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\components\\TaskModal\\TaskModal.tsx":"3","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\components\\TaskListItem\\TaskListItem.tsx":"4","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\page\\Tasks\\TasksPage.tsx":"5","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\store\\Tasks.ts":"6"},{"size":231,"mtime":1687352657974,"results":"7","hashOfConfig":"8"},{"size":158,"mtime":1687512263359,"results":"9","hashOfConfig":"8"},{"size":2391,"mtime":1687512419906,"results":"10","hashOfConfig":"8"},{"size":2319,"mtime":1687684011427,"results":"11","hashOfConfig":"8"},{"size":3463,"mtime":1687683045370,"results":"12","hashOfConfig":"8"},{"size":2282,"mtime":1687524592689,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"17"},"14f8qwf",{"filePath":"18","messages":"19","suppressedMessages":"20","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","suppressedMessages":"23","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"24"},{"filePath":"25","messages":"26","suppressedMessages":"27","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"28"},{"filePath":"29","messages":"30","suppressedMessages":"31","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","suppressedMessages":"34","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\index.tsx",[],[],[],"C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\App.tsx",[],[],"C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\components\\TaskModal\\TaskModal.tsx",["35"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {Button, Form, Input, Modal, Select} from \"antd\";\r\nimport {ITaskModalProps} from \"./ITaskModalProps\";\r\nimport tasks from \"../../store/Tasks\";\r\n\r\nconst requiredFormItem = {\r\n    required: true,\r\n    message: ''\r\n}\r\n\r\nconst {TextArea} = Input;\r\n\r\ninterface IOption {\r\n    value: number,\r\n    label: string\r\n}\r\n\r\nconst TaskModal: FC<ITaskModalProps> = ({open, onCancel, initialValues, onFinish, loading}) => {\r\n    const [options, setOptions] = useState<IOption[]>();\r\n\r\n    useEffect(() => {\r\n        setOptions(tasks.tasks.map(task => {\r\n            return {\r\n                value: task.id,\r\n                label: task.name\r\n            }\r\n        }))\r\n    }, [tasks.tasks])\r\n\r\n    return (\r\n        <Modal\r\n            destroyOnClose\r\n            title={initialValues ? initialValues.name : 'Новая задача'}\r\n            open={open}\r\n            onCancel={onCancel}\r\n            footer={null}\r\n            width={800}\r\n        >\r\n            <Form labelCol={{span: 8}} wrapperCol={{span: 16}} labelAlign='left' onFinish={onFinish} initialValues={initialValues}>\r\n                <Form.Item name='name' label='Наименование' rules={[requiredFormItem]}>\r\n                    <Input placeholder='Название задачи'/>\r\n                </Form.Item>\r\n                <Form.Item name='description' label='Описание'>\r\n                    <TextArea placeholder='Описание задачи'/>\r\n                </Form.Item>\r\n                <Form.Item name='parentTaskId' label='Задача верхнего уровня'>\r\n                    <Select\r\n                        showSearch\r\n                        placeholder=\"Задача верхнего уровня\"\r\n                        filterOption={(input, option) =>\r\n                            (option?.label ?? '').toLowerCase().includes(input.toLowerCase())\r\n                        }\r\n                        options={options}\r\n                    />\r\n                </Form.Item>\r\n                <Form.Item style={{display: 'flex', justifyContent: 'right'}}>\r\n                    <Button htmlType='submit' type='primary' loading={loading}>{initialValues ? 'Редактировать' : 'Добавить'}</Button>\r\n                </Form.Item>\r\n            </Form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default TaskModal;","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\components\\TaskListItem\\TaskListItem.tsx",["36"],[],"import React, {FC, useEffect, useState} from 'react';\r\nimport {ITaskListItemProps} from \"./ITaskListItemProps\";\r\nimport {ITask} from \"../../type/task\";\r\nimport tasks from \"../../store/Tasks\";\r\nimport style from './TaskListItem.module.scss'\r\nimport {Checkbox, message} from 'antd';\r\nimport type { CheckboxChangeEvent } from 'antd/es/checkbox';\r\nimport {observer} from \"mobx-react-lite\";\r\n\r\nconst TaskListItem: FC<ITaskListItemProps> = ({task, childrenStyle}) => {\r\n    const [childrenList, setChildrenList] = useState<ITask[]>([]);\r\n    const [childrenOpen, setChildrenOpen] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        setChildrenList(tasks.getChildrenTaskList(task.id))\r\n    }, [tasks.tasks])\r\n\r\n    const onCheck = (e: CheckboxChangeEvent) => {\r\n        if (e.target.checked) tasks.selectTask(task.id)\r\n        else tasks.deselectTask(task.id);\r\n    }\r\n\r\n    const taskClickHandler = () => {\r\n        if (!childrenOpen) {\r\n            try {\r\n                tasks.getTask(task.id);\r\n                setChildrenOpen(true);\r\n            } catch (e) {\r\n                message.error('Ошибка загрузки задач!');\r\n            }\r\n        } else setChildrenOpen(false);\r\n    }\r\n\r\n    return (\r\n        <div style={childrenStyle}>\r\n            <div className={style.task} onClick={taskClickHandler}>\r\n                {\r\n                    childrenList.length > 0\r\n                        ?\r\n                        <div className={childrenOpen ? style.arrow__open : style.arrow__close}></div>\r\n                        : null\r\n                }\r\n                <p className={style.task__name}>{task.name}</p>\r\n                <Checkbox onChange={onCheck}\r\n                          checked={!!tasks.selectedTasks.find(selectedTask => selectedTask.id === task.id)}\r\n                ></Checkbox>\r\n            </div>\r\n            <>\r\n                {\r\n                    childrenList.length > 0 && childrenOpen\r\n                        ?\r\n                        childrenList.map(childrenTask =>\r\n                            <TaskListItem task={childrenTask} childrenStyle={{margin: '5px 0 5px 10px'}} key={childrenTask.id}/>\r\n                        )\r\n                        : null\r\n                }\r\n            </>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default observer(TaskListItem);","C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\page\\Tasks\\TasksPage.tsx",[],[],"C:\\Users\\Dpopo\\Documents\\GitHub\\infinity-task-list\\src\\store\\Tasks.ts",[],["37"],{"ruleId":"38","severity":1,"message":"39","line":28,"column":8,"nodeType":"40","endLine":28,"endColumn":21,"suggestions":"41"},{"ruleId":"38","severity":1,"message":"42","line":16,"column":8,"nodeType":"40","endLine":16,"endColumn":21,"suggestions":"43"},{"ruleId":"44","severity":1,"message":"45","line":79,"column":1,"nodeType":"46","endLine":79,"endColumn":28,"suppressions":"47"},"react-hooks/exhaustive-deps","React Hook useEffect has an unnecessary dependency: 'tasks.tasks'. Either exclude it or remove the dependency array. Outer scope values like 'tasks.tasks' aren't valid dependencies because mutating them doesn't re-render the component.","ArrayExpression",["48"],"React Hook useEffect has a missing dependency: 'task.id'. Either include it or remove the dependency array. Outer scope values like 'tasks.tasks' aren't valid dependencies because mutating them doesn't re-render the component.",["49"],"import/no-anonymous-default-export","Assign instance to a variable before exporting as module default","ExportDefaultDeclaration",["50"],{"desc":"51","fix":"52"},{"desc":"53","fix":"54"},{"kind":"55","justification":"56"},"Update the dependencies array to be: []",{"range":"57","text":"58"},"Update the dependencies array to be: [task.id]",{"range":"59","text":"60"},"directive","",[723,736],"[]",[696,709],"[task.id]"]