{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nclass Tasks {\n  constructor() {\n    this.tasks = [{\n      id: 1,\n      name: '1',\n      description: '1',\n      children: [{\n        id: 11,\n        name: '1.1',\n        description: '1',\n        children: [{\n          id: 111,\n          name: '1.1.1',\n          description: '1'\n        }]\n      }]\n    }, {\n      id: 2,\n      name: '2',\n      description: '2'\n    }];\n    this.setTasks = data => this.tasks = data;\n    this.task = {};\n    this.setTask = data => this.task = data;\n    this.addTask = data => {\n      this.setTasks([...this.tasks, {\n        id: this.tasks.length,\n        name: data.name,\n        description: data.description,\n        parentTaskId: data.parentTaskId\n      }]);\n    };\n    this.getChildrenTask = parentTaskId => {\n      return this.tasks.filter(task => task.id === parentTaskId);\n    };\n    // addTask = (data: ITaskForm) => {\n    //     if (!data.parentTaskId) {\n    //         this.setTasks([...this.tasks, {\n    //             id: this.tasks.length,\n    //             name: data.name,\n    //             description: data.description,\n    //             children: []\n    //         }])\n    //     } else {\n    //         this.setTasks(this.tasks.map(task => (\n    //             task.id === data.parentTaskId\n    //             ?\n    //                 {\n    //                     id: task.id,\n    //                     name: task.name,\n    //                     description: task.description,\n    //                         children: task.children ?\n    //                             [...task.children, {\n    //                                     id: task.children.length,\n    //                                     name: data.name,\n    //                                     description: data.description,\n    //                                     children: []\n    //                             }]\n    //                             : [{\n    //                                 id: 1,\n    //                                 name: data.name,\n    //                                 description: data.description,\n    //                                 children: []\n    //                             }]\n    //                 }\n    //             : task\n    //         )))\n    //     }\n    //\n    //     return this.tasks\n    // }\n    this.getTask = taskId => {\n      this.setTask(this.tasks.filter(task => task.id === taskId)[0]);\n    };\n    makeAutoObservable(this);\n  }\n}\n\n// eslint-disable-next-line\nexport default new Tasks();","map":{"version":3,"names":["makeAutoObservable","Tasks","constructor","tasks","id","name","description","children","setTasks","data","task","setTask","addTask","length","parentTaskId","getChildrenTask","filter","getTask","taskId"],"sources":["C:/Users/Dpopo/Documents/GitHub/infinity-task-list/src/store/Tasks.ts"],"sourcesContent":["import {makeAutoObservable} from \"mobx\";\r\nimport {ITask, ITaskForm} from \"../type/task\";\r\n\r\nclass Tasks {\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    };\r\n\r\n    tasks: ITask[] = [\r\n        {\r\n            id: 1,\r\n            name: '1',\r\n            description: '1',\r\n            children: [\r\n                {\r\n                    id: 11,\r\n                    name: '1.1',\r\n                    description: '1',\r\n                    children: [\r\n                        {\r\n                            id: 111,\r\n                            name: '1.1.1',\r\n                            description: '1',\r\n                        }\r\n                    ]\r\n                }\r\n            ]\r\n        },\r\n        {\r\n            id: 2,\r\n            name: '2',\r\n            description: '2'\r\n        },\r\n    ] as ITask[];\r\n    setTasks = (data: ITask[]) => this.tasks = data;\r\n\r\n    task: ITask | undefined = {} as ITask | undefined;\r\n    setTask = (data: ITask) => this.task = data;\r\n\r\n    addTask = (data: ITaskForm) => {\r\n        this.setTasks([...this.tasks,\r\n            {\r\n                id: this.tasks.length,\r\n                name: data.name,\r\n                description: data.description,\r\n                parentTaskId: data.parentTaskId\r\n            }]\r\n        )\r\n    }\r\n\r\n    getChildrenTask = (parentTaskId: number) => {\r\n        return this.tasks.filter(task => task.id === parentTaskId)\r\n    }\r\n\r\n    // addTask = (data: ITaskForm) => {\r\n    //     if (!data.parentTaskId) {\r\n    //         this.setTasks([...this.tasks, {\r\n    //             id: this.tasks.length,\r\n    //             name: data.name,\r\n    //             description: data.description,\r\n    //             children: []\r\n    //         }])\r\n    //     } else {\r\n    //         this.setTasks(this.tasks.map(task => (\r\n    //             task.id === data.parentTaskId\r\n    //             ?\r\n    //                 {\r\n    //                     id: task.id,\r\n    //                     name: task.name,\r\n    //                     description: task.description,\r\n    //                         children: task.children ?\r\n    //                             [...task.children, {\r\n    //                                     id: task.children.length,\r\n    //                                     name: data.name,\r\n    //                                     description: data.description,\r\n    //                                     children: []\r\n    //                             }]\r\n    //                             : [{\r\n    //                                 id: 1,\r\n    //                                 name: data.name,\r\n    //                                 description: data.description,\r\n    //                                 children: []\r\n    //                             }]\r\n    //                 }\r\n    //             : task\r\n    //         )))\r\n    //     }\r\n    //\r\n    //     return this.tasks\r\n    // }\r\n\r\n    getTask = (taskId: number) => {\r\n        this.setTask(this.tasks.filter(task => task.id === taskId)[0])\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default new Tasks();"],"mappings":"AAAA,SAAQA,kBAAkB,QAAO,MAAM;AAGvC,MAAMC,KAAK,CAAC;EACRC,WAAWA,CAAA,EAAG;IAAA,KAIdC,KAAK,GAAY,CACb;MACIC,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTC,WAAW,EAAE,GAAG;MAChBC,QAAQ,EAAE,CACN;QACIH,EAAE,EAAE,EAAE;QACNC,IAAI,EAAE,KAAK;QACXC,WAAW,EAAE,GAAG;QAChBC,QAAQ,EAAE,CACN;UACIH,EAAE,EAAE,GAAG;UACPC,IAAI,EAAE,OAAO;UACbC,WAAW,EAAE;QACjB,CAAC;MAET,CAAC;IAET,CAAC,EACD;MACIF,EAAE,EAAE,CAAC;MACLC,IAAI,EAAE,GAAG;MACTC,WAAW,EAAE;IACjB,CAAC,CACJ;IAAA,KACDE,QAAQ,GAAIC,IAAa,IAAK,IAAI,CAACN,KAAK,GAAGM,IAAI;IAAA,KAE/CC,IAAI,GAAsB,CAAC,CAAC;IAAA,KAC5BC,OAAO,GAAIF,IAAW,IAAK,IAAI,CAACC,IAAI,GAAGD,IAAI;IAAA,KAE3CG,OAAO,GAAIH,IAAe,IAAK;MAC3B,IAAI,CAACD,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACL,KAAK,EACxB;QACIC,EAAE,EAAE,IAAI,CAACD,KAAK,CAACU,MAAM;QACrBR,IAAI,EAAEI,IAAI,CAACJ,IAAI;QACfC,WAAW,EAAEG,IAAI,CAACH,WAAW;QAC7BQ,YAAY,EAAEL,IAAI,CAACK;MACvB,CAAC,CACL,CAAC;IACL,CAAC;IAAA,KAEDC,eAAe,GAAID,YAAoB,IAAK;MACxC,OAAO,IAAI,CAACX,KAAK,CAACa,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKU,YAAY,CAAC;IAC9D,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KAEAG,OAAO,GAAIC,MAAc,IAAK;MAC1B,IAAI,CAACP,OAAO,CAAC,IAAI,CAACR,KAAK,CAACa,MAAM,CAACN,IAAI,IAAIA,IAAI,CAACN,EAAE,KAAKc,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IAxFGlB,kBAAkB,CAAC,IAAI,CAAC;EAC5B;AAwFJ;;AAEA;AACA,eAAe,IAAIC,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}