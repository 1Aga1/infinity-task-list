{"ast":null,"code":"import { makeAutoObservable } from \"mobx\";\nclass Tasks {\n  constructor() {\n    // tasks: ITask[] = [\n    //     {\n    //         id: 1,\n    //         name: '1',\n    //         description: '1',\n    //         children: [\n    //             {\n    //                 id: 11,\n    //                 name: '1.1',\n    //                 description: '1',\n    //                 children: [\n    //                     {\n    //                         id: 111,\n    //                         name: '1.1.1',\n    //                         description: '1',\n    //                     }\n    //                 ]\n    //             }\n    //         ]\n    //     },\n    //     {\n    //         id: 2,\n    //         name: '2',\n    //         description: '2'\n    //     },\n    // ] as ITask[];\n    this.tasks = [];\n    this.setTasks = data => this.tasks = data;\n    this.task = {};\n    this.setTask = data => this.task = data;\n    this.getParentTask = parentTaskId => {};\n    this.addTask = data => {\n      this.setTasks([...this.tasks, {\n        id: this.tasks.length,\n        name: data.name,\n        description: data.description,\n        parentTaskId: data.parentTaskId\n      }]);\n      return this.tasks;\n    };\n    // addTask = (data: ITaskForm) => {\n    //     if (!data.parentTaskId) {\n    //         this.setTasks([...this.tasks, {\n    //             id: this.tasks.length,\n    //             name: data.name,\n    //             description: data.description,\n    //             children: []\n    //         }])\n    //     } else {\n    //         this.setTasks(this.tasks.map(task => (\n    //             task.id === data.parentTaskId\n    //             ?\n    //                 {\n    //                     id: task.id,\n    //                     name: task.name,\n    //                     description: task.description,\n    //                         children: task.children ?\n    //                             [...task.children, {\n    //                                     id: parseInt(1 + task.children.length.toString()),\n    //                                     name: data.name,\n    //                                     description: data.description,\n    //                                     children: []\n    //                             }]\n    //                             : [{\n    //                                 id: parseInt(1 + '1'),\n    //                                 name: data.name,\n    //                                 description: data.description,\n    //                                 children: []\n    //                             }]\n    //                 }\n    //             : task\n    //         )))\n    //     }\n    //\n    //     return this.tasks\n    // }\n    this.getTask = taskId => {\n      this.setTask(this.tasks.filter(task => task.id === taskId)[0]);\n    };\n    makeAutoObservable(this);\n  }\n}\n\n// eslint-disable-next-line\nexport default new Tasks();","map":{"version":3,"names":["makeAutoObservable","Tasks","constructor","tasks","setTasks","data","task","setTask","getParentTask","parentTaskId","addTask","id","length","name","description","getTask","taskId","filter"],"sources":["C:/Users/Dpopo/Documents/GitHub/infinity-task-list/src/store/Tasks.ts"],"sourcesContent":["import {makeAutoObservable} from \"mobx\";\r\nimport {ITask, ITaskForm} from \"../type/task\";\r\n\r\nclass Tasks {\r\n    constructor() {\r\n        makeAutoObservable(this);\r\n    };\r\n\r\n    // tasks: ITask[] = [\r\n    //     {\r\n    //         id: 1,\r\n    //         name: '1',\r\n    //         description: '1',\r\n    //         children: [\r\n    //             {\r\n    //                 id: 11,\r\n    //                 name: '1.1',\r\n    //                 description: '1',\r\n    //                 children: [\r\n    //                     {\r\n    //                         id: 111,\r\n    //                         name: '1.1.1',\r\n    //                         description: '1',\r\n    //                     }\r\n    //                 ]\r\n    //             }\r\n    //         ]\r\n    //     },\r\n    //     {\r\n    //         id: 2,\r\n    //         name: '2',\r\n    //         description: '2'\r\n    //     },\r\n    // ] as ITask[];\r\n\r\n    tasks: ITask[] = [] as ITask[];\r\n    setTasks = (data: ITask[]) => this.tasks = data;\r\n\r\n    task: ITask | undefined = {} as ITask | undefined;\r\n    setTask = (data: ITask) => this.task = data;\r\n\r\n    getParentTask = (parentTaskId: number) => {\r\n\r\n    }\r\n\r\n    addTask = (data: ITaskForm) => {\r\n        this.setTasks([...this.tasks,\r\n            {\r\n                id: this.tasks.length,\r\n                name: data.name,\r\n                description: data.description,\r\n                parentTaskId: data.parentTaskId\r\n            }])\r\n\r\n        return this.tasks\r\n    }\r\n\r\n    // addTask = (data: ITaskForm) => {\r\n    //     if (!data.parentTaskId) {\r\n    //         this.setTasks([...this.tasks, {\r\n    //             id: this.tasks.length,\r\n    //             name: data.name,\r\n    //             description: data.description,\r\n    //             children: []\r\n    //         }])\r\n    //     } else {\r\n    //         this.setTasks(this.tasks.map(task => (\r\n    //             task.id === data.parentTaskId\r\n    //             ?\r\n    //                 {\r\n    //                     id: task.id,\r\n    //                     name: task.name,\r\n    //                     description: task.description,\r\n    //                         children: task.children ?\r\n    //                             [...task.children, {\r\n    //                                     id: parseInt(1 + task.children.length.toString()),\r\n    //                                     name: data.name,\r\n    //                                     description: data.description,\r\n    //                                     children: []\r\n    //                             }]\r\n    //                             : [{\r\n    //                                 id: parseInt(1 + '1'),\r\n    //                                 name: data.name,\r\n    //                                 description: data.description,\r\n    //                                 children: []\r\n    //                             }]\r\n    //                 }\r\n    //             : task\r\n    //         )))\r\n    //     }\r\n    //\r\n    //     return this.tasks\r\n    // }\r\n\r\n    getTask = (taskId: number) => {\r\n        this.setTask(this.tasks.filter(task => task.id === taskId)[0])\r\n    }\r\n}\r\n\r\n// eslint-disable-next-line\r\nexport default new Tasks();"],"mappings":"AAAA,SAAQA,kBAAkB,QAAO,MAAM;AAGvC,MAAMC,KAAK,CAAC;EACRC,WAAWA,CAAA,EAAG;IAId;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KAEAC,KAAK,GAAY,EAAE;IAAA,KACnBC,QAAQ,GAAIC,IAAa,IAAK,IAAI,CAACF,KAAK,GAAGE,IAAI;IAAA,KAE/CC,IAAI,GAAsB,CAAC,CAAC;IAAA,KAC5BC,OAAO,GAAIF,IAAW,IAAK,IAAI,CAACC,IAAI,GAAGD,IAAI;IAAA,KAE3CG,aAAa,GAAIC,YAAoB,IAAK,CAE1C,CAAC;IAAA,KAEDC,OAAO,GAAIL,IAAe,IAAK;MAC3B,IAAI,CAACD,QAAQ,CAAC,CAAC,GAAG,IAAI,CAACD,KAAK,EACxB;QACIQ,EAAE,EAAE,IAAI,CAACR,KAAK,CAACS,MAAM;QACrBC,IAAI,EAAER,IAAI,CAACQ,IAAI;QACfC,WAAW,EAAET,IAAI,CAACS,WAAW;QAC7BL,YAAY,EAAEJ,IAAI,CAACI;MACvB,CAAC,CAAC,CAAC;MAEP,OAAO,IAAI,CAACN,KAAK;IACrB,CAAC;IAED;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAAA,KAEAY,OAAO,GAAIC,MAAc,IAAK;MAC1B,IAAI,CAACT,OAAO,CAAC,IAAI,CAACJ,KAAK,CAACc,MAAM,CAACX,IAAI,IAAIA,IAAI,CAACK,EAAE,KAAKK,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAClE,CAAC;IA3FGhB,kBAAkB,CAAC,IAAI,CAAC;EAC5B;AA2FJ;;AAEA;AACA,eAAe,IAAIC,KAAK,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}